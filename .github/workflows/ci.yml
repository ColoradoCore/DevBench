name: Build and Release DevBench

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Publish project
        run: dotnet publish --configuration Release --output ./publish

      - name: Fetch Latest Release Version
        id: get_latest_release
        run: |
          # Use curl to get the latest release tag
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name // "v0.0.0"')
          echo "Latest release tag: $LATEST_RELEASE"

          # Remove 'v' prefix and split the version
          VERSION=${LATEST_RELEASE#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Increment the patch version
          PATCH=$((PATCH + 1))

          # Construct the new version
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"

          # Save the new version to the environment
          echo "NEW_TAG_NAME=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_RELEASE_NAME=Build $NEW_VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG_NAME }}
          release_name: ${{ env.NEW_RELEASE_NAME }}
          draft: false
          prerelease: false
          body: |
            Automated release created by GitHub Actions.
